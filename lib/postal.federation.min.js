/**
 * postal.federation - A base plugin for federating instances of postal.js across various boundaries.
 * Author: Jim Cowart (http://ifandelse.com)
 * Version: v0.3.0-rc2
 * Url: http://github.com/postaljs/postal.federation
 * License(s): (MIT OR GPL-2.0)
 */
(function(t,n){"function"==typeof define&&define.amd?define(["lodash","postal"],function(e,i){return n(e,i,t)}):"object"==typeof module&&module.exports?module.exports=n(require("lodash"),require("postal")):t.postal=n(t._,t.postal,t)})(this,function(t,n,e,i){function o(t){n.fedx.signalReady.apply(this,t)}function s(t){n.fedx.send.apply(this,t)}function a(t){n.fedx.onFederatedMsg.call(this,t)}n.createUUID||(n.createUUID=function(){for(var t=[],n="0123456789abcdef",e=0;36>e;e++)t[e]=n.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=n.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}),n.instanceId||(n.instanceId=function(){var t,e;return function(i){return i&&(e=t,t=i,n.publish({channel:n.configuration.SYSTEM_CHANNEL,topic:"instanceId.changed",data:{oldId:e,newId:t}})),t}}());var c=function(){},r=!1,d=[],p=[],l=[],f={enabled:!0,filterMode:"whitelist",filterDirection:"both"},u=f,h=function(e,i,o){var s=Object.prototype.hasOwnProperty.call(n.fedx.filters[o],e),a=s&&t.any(n.fedx.filters[o][e],function(t){return n.configuration.resolver.compare(t,i)}),c="blacklist"===u.filterMode;return u.enabled&&(c&&(!s||s&&!a)||!c&&s&&a)},g={ping:function(){return{type:"federation.ping",instanceId:n.instanceId(),timeStamp:new Date,ticket:n.createUUID()}},pong:function(t){return{type:"federation.pong",instanceId:n.instanceId(),timeStamp:new Date,pingData:{instanceId:t.instanceId,timeStamp:t.timeStamp,ticket:t.ticket}}},message:function(t){return{type:"federation.message",instanceId:n.instanceId(),timeStamp:new Date,envelope:t}},disconnect:function(){return{type:"federation.disconnect",instanceId:n.instanceId(),timeStamp:new Date}},bundle:function(t){return{type:"federation.bundle",instanceId:n.instanceId(),timeStamp:new Date,packingSlips:t}}},k={"federation.ping":function(t){t.source.setInstanceId(t.packingSlip.instanceId),t.source.handshakeComplete?t.source.sendPong(t.packingSlip):t.source.sendBundle([n.fedx.getPackingSlip("pong",t.packingSlip),n.fedx.getPackingSlip("ping")])},"federation.pong":function(e){e.source.handshakeComplete=!0,e.source.setInstanceId(e.packingSlip.instanceId),e.source.pings[e.packingSlip.pingData.ticket]&&(e.source.pings[e.packingSlip.pingData.ticket].callback({ticket:e.packingSlip.pingData.ticket,instanceId:e.packingSlip.instanceId,source:e.source}),e.source.pings[e.packingSlip.pingData.ticket]=i),t.contains(n.fedx.clients,e.packingSlip.instanceId)||n.fedx.clients.push(e.packingSlip.instanceId),n.publish({channel:"postal.federation",topic:"client.federated",data:{remoteId:e.source.instanceId,localId:n.instanceId(),transport:e.transport}})},"federation.disconnect":function(e){n.fedx.clients=t.without(n.fedx.clients,e.source.instanceId),n.fedx.disconnect({transport:e.source.transportName,instanceId:e.source.instanceId,doNotNotify:!0})},"federation.message":function(t){var e=t.packingSlip.envelope;h(e.channel,e.topic,"in")&&(e.lastSender=t.packingSlip.instanceId,n.publish(e))},"federation.bundle":function(e){t.each(e.packingSlip.packingSlips,function(i){n.fedx.onFederatedMsg(t.extend({},e,{packingSlip:i}))})}},I=function(t,n,e){this.target=t,this.options=n||{},this.pings={},this.instanceId=e,this.handshakeComplete=!1};return I.prototype.sendPing=function(t){var e=n.fedx.getPackingSlip("ping");this.pings[e.ticket]={ticket:e.ticket,callback:t||c},this.send(e)},I.prototype.sendPong=function(t){this.send(n.fedx.getPackingSlip("pong",t))},I.prototype.sendBundle=function(t){this.send(n.fedx.getPackingSlip("bundle",t))},I.prototype.sendMessage=function(e){if(this.handshakeComplete){e.originId=e.originId||n.instanceId();var i=t.clone(e);!this.instanceId||this.instanceId===i.lastSender||i.knownIds&&i.knownIds.length&&(!i.knownIds||t.include(i.knownIds,this.instanceId))||(i.knownIds=(i.knownIds||[]).concat(t.without(n.fedx.clients,this.instanceId)),this.send(n.fedx.getPackingSlip("message",i)))}},I.prototype.disconnect=function(){this.send(n.fedx.getPackingSlip("disconnect"))},I.prototype.onMessage=function(t){this.shouldProcess()&&n.fedx.onFederatedMsg({transport:this.transportName,packingSlip:t,source:this})},I.prototype.shouldProcess=function(){return!0},I.prototype.send=function(){throw new Error("An object deriving from FederationClient must provide an implementation for 'send'.")},I.prototype.setInstanceId=function(t){this.instanceId=t},I.extend=function(n,e){function i(){I.apply(this,arguments)}return i.prototype=Object.create(I.prototype),t.extend(i.prototype,n),t.extend(i,e),i},n.fedx=t.extend({FederationClient:I,packingSlips:g,handlers:k,clients:[],transports:{},filters:{"in":{},out:{}},addFilter:function(n){n=t.isArray(n)?n:[n],t.each(n,function(n){n.direction=n.direction||u.filterDirection,t.each("both"===n.direction?["in","out"]:[n.direction],function(e){this.filters[e][n.channel]?t.include(this.filters[e][n.channel],n.topic)||this.filters[e][n.channel].push(n.topic):this.filters[e][n.channel]=[n.topic]},this)},this)},removeFilter:function(n){n=t.isArray(n)?n:[n],t.each(n,function(n){n.direction=n.direction||u.filterDirection,t.each("both"===n.direction?["in","out"]:[n.direction],function(e){this.filters[e][n.channel]&&t.include(this.filters[e][n.channel],n.topic)&&(this.filters[e][n.channel]=t.without(this.filters[e][n.channel],n.topic))},this)},this)},canSendRemote:function(t,n){return h(t,n,"out")},configure:function(n){if(n&&n.filterMode&&"blacklist"!==n.filterMode&&"whitelist"!==n.filterMode)throw new Error("postal.fedx filterMode must be 'blacklist' or 'whitelist'.");return n&&(u=t.defaults(n,f)),u},getPackingSlip:function(t){return Object.prototype.hasOwnProperty.call(g,t)?g[t].apply(this,Array.prototype.slice.call(arguments,1)):void 0},onFederatedMsg:function(t){if(!r)return void d.push(t);if(!Object.prototype.hasOwnProperty.call(k,t.packingSlip.type))throw new Error("postal.federation does not have a message handler for '"+t.packingSlip.type+"'.");k[t.packingSlip.type](t)},sendMessage:function(n){return r?void t.each(this.transports,function(t){t.sendMessage(n)}):void p.push(arguments)},disconnect:function(n){n=n||{};var e=this.transports;n.transport&&(e={},e[n.transport]=this.transports[n.transport]),t.each(e,function(t){t.disconnect({target:n.target,instanceId:n.instanceId,doNotNotify:!!n.doNotNotify})},this)},_getTransports:function(){return t.reduce(this.transports,function(t,n,e){return t[e]=!0,t},{})},signalReady:function(n,e,i){if(!r)return void l.push(arguments);var o=this._getTransports();switch(arguments.length){case 1:"function"==typeof n?i=n:"string"==typeof n&&(o={},o[n]=this.transports[n],i=c);break;case 2:"string"==typeof n?(o={},o[n]=this.transports[n]):o=n,i=e||c;break;case 3:o={},o[n]=[e]}t.each(o,function(t,n){t="boolean"==typeof t?[]:t,this.transports[n].signalReady(t,i)},this)}},n.fedx),n.addWireTap(function(t,e){n.fedx.canSendRemote(e.channel,e.topic)&&n.fedx.sendMessage(e)}),n.subscribe({channel:n.configuration.SYSTEM_CHANNEL,topic:"instanceId.changed",callback:function(){for(r=!0;l.length;)o(l.shift());for(;p.length;)s(p.shift());for(;d.length;)a(d.shift())}}),n.instanceId()!==i&&(r=!0),n});